// Generated by CoffeeScript 1.12.5
var CONFIG, CheckBotStart, CheckWebInstalled, Client, LOG, VarToText, XMLHttpRequest, express, expressApp, fs, ini, requestAjax, sha1, tmi;

express = require("express");

expressApp = express();

ini = require("ini");

fs = require("fs");

sha1 = require("sha1");

XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;

tmi = require("tmi.js");

CheckBotStart = function() {
  var CONFIG;
  CONFIG = ini.parse(fs.readFileSync("./data/config.ini", 'utf-8'));
  if (CONFIG.BOT.start) {
    return true;
  } else {
    return false;
  }
};

CheckWebInstalled = function() {
  var CONFIG;
  CONFIG = ini.parse(fs.readFileSync("./data/config.ini", 'utf-8'));
  if (CONFIG.OPTION.instalX === CONFIG.OPTION.instalXmax) {
    return true;
  } else {
    return false;
  }
};

LOG = function(save, LOG) {
  if (save) {
    fs.appendFileSync("./data/log/LOG.txt", "[BOT] " + LOG + "\n");
    return console.log("[BOT] " + LOG);
  } else {
    return console.log("[BOT] " + LOG);
  }
};

requestAjax = function(fun_url, fun_method) {
  var xmlHTTP;
  xmlHTTP = new XMLHttpRequest();
  xmlHTTP.open(fun_method || "GET", fun_url, false);
  xmlHTTP.setRequestHeader("Client-ID", "y5ga4viagr5qrsdjkr4pxp6scvbx3a");
  xmlHTTP.send(null);
  return xmlHTTP.responseText;
};

VarToText = function(text, data) {
  var CONFIG, DATA, INFO;
  CONFIG = ini.parse(fs.readFileSync("./data/config.ini", 'utf-8'));
  INFO = JSON.parse(requestAjax("https://api.twitch.tv/kraken/streams/" + CONFIG.USER.chanel, "GET"));
  DATA = data.data;
  text = text.toString().replace("${title}", INFO.stream.channel.status).replace("${game}", INFO.stream.game).replace("${resolution}", INFO.stream.video_height).replace("${fps}", Math.round(INFO.stream.average_fps)).replace("${lang}", INFO.stream.channel.language).replace("${id}", INFO.stream._id).replace("${viewer}", INFO.stream.viewers).replace("${follower}", INFO.stream.channel.followers).replace("${views}", INFO.stream.channel.views).replace("${lang_s}", INFO.stream.channel.broadcaster_language).replace("${streamer}", INFO.stream.channel.display_name).replace("${url}", INFO.stream.channel.url).replace("${username}", DATA.username);
  return text;
};

fs.unlink("./data/log/LOG.txt");

expressApp.listen(3000);

expressApp.use(express["static"]('public'));

LOG(true, "Web: 127.0.0.1:3000");

expressApp.get("/GET/data/config/", function(req, res) {
  return res.send(ini.parse(fs.readFileSync("./data/config.ini", 'utf-8')));
});

expressApp.get("/GET/data/lang/", function(req, res) {
  var iniFile;
  iniFile = ini.parse(fs.readFileSync("./data/config.ini", 'utf-8'));
  return res.send(ini.parse(fs.readFileSync("./data/lang/" + iniFile.OPTION.lang + ".ini", 'utf-8')));
});

expressApp.get("/GET/data/event/", function(req, res) {
  return res.send(ini.parse(fs.readFileSync("./data/command/event.ini", 'utf-8')));
});

expressApp.get("/GET/data/command/", function(req, res) {
  return res.send(ini.parse(fs.readFileSync("./data/command/command.ini", 'utf-8')));
});

expressApp.get("/GET/data/follower/", function(req, res) {
  var iniFile;
  iniFile = ini.parse(fs.readFileSync("./data/stats/follower.ini", 'utf-8'));
  iniFile.INFO.follower = VarToText("${follower}", {
    data: {
      username: ""
    }
  });
  fs.writeFileSync("./data/stats/follower.ini", ini.stringify(iniFile));
  return res.send(ini.parse(fs.readFileSync("./data/stats/follower.ini", 'utf-8')));
});

expressApp.get("/GET/data/viewer/", function(req, res) {
  var iniFile;
  iniFile = ini.parse(fs.readFileSync("./data/stats/follower.ini", 'utf-8'));
  iniFile.INFO.viewer = VarToText("${viewer}", {
    data: {
      username: ""
    }
  });
  fs.writeFileSync("./data/stats/viewer.ini", ini.stringify(iniFile));
  return res.send(ini.parse(fs.readFileSync("./data/stats/viewer.ini", 'utf-8')));
});

expressApp.get("/GET/data/message/", function(req, res) {
  return res.send(ini.parse(fs.readFileSync("./data/stats/message.ini", 'utf-8')));
});

expressApp.get("/GET/data/log/", function(req, res) {
  return res.send(fs.readFileSync("./data/log/LOG.txt", 'utf-8'));
});

expressApp.get("/PUT/data/config/", function(req, res) {
  var iniFile;
  if (req.query["config.option.instalx"]) {
    iniFile = ini.parse(fs.readFileSync("./data/config.ini", 'utf-8'));
    iniFile.OPTION.instalX = req.query["config.option.instalx"];
    fs.writeFileSync("./data/config.ini", ini.stringify(iniFile));
  }
  if (req.query["config.user.chanel"]) {
    iniFile = ini.parse(fs.readFileSync("./data/config.ini", 'utf-8'));
    iniFile.USER.chanel = req.query["config.user.chanel"];
    fs.writeFileSync("./data/config.ini", ini.stringify(iniFile));
  }
  if (req.query["config.user.username"]) {
    iniFile = ini.parse(fs.readFileSync("./data/config.ini", 'utf-8'));
    iniFile.USER.username = req.query["config.user.username"];
    fs.writeFileSync("./data/config.ini", ini.stringify(iniFile));
  }
  if (req.query["config.user.password"]) {
    iniFile = ini.parse(fs.readFileSync("./data/config.ini", 'utf-8'));
    iniFile.USER.password = req.query["config.user.password"];
    fs.writeFileSync("./data/config.ini", ini.stringify(iniFile));
  }
  if (req.query["config.bot.color"]) {
    iniFile = ini.parse(fs.readFileSync("./data/config.ini", 'utf-8'));
    iniFile.BOT.color = req.query["config.bot.color"];
    fs.writeFileSync("./data/config.ini", ini.stringify(iniFile));
  }
  return res.send("ok");
});

expressApp.get("/SET/data/config/", function(req, res) {
  var iniFile;
  if (req.query["config.bot.start"]) {
    iniFile = ini.parse(fs.readFileSync("./data/config.ini", 'utf-8'));
    iniFile.BOT.start = req.query["config.bot.start"];
    fs.writeFileSync("./data/config.ini", ini.stringify(iniFile));
  }
  return res.send("ok");
});

expressApp.get("/SET/data/event/", function(req, res) {
  var iniFile, newEvent, obj;
  if (req.query["command.event.event"]) {
    iniFile = ini.parse(fs.readFileSync("./data/command/event.ini", 'utf-8'));
    newEvent = (
      obj = {},
      obj["" + (sha1(Math.random(0, 10000000000).toString().substring(2)))] = {
        event: req.query["command.event.event"],
        method: req.query["command.event.method"],
        message: req.query["command.event.message"]
      },
      obj
    );
    fs.appendFileSync("./data/command/event.ini", ini.stringify(newEvent));
  }
  return res.send("ok");
});

expressApp.get("/SET/data/command", function(req, res) {
  var iniFile, newCommand, obj;
  if (req.query["command.command.command"]) {
    iniFile = ini.parse(fs.readFileSync("./data/command/command.ini", "utf-8"));
    newCommand = (
      obj = {},
      obj["" + (sha1(Math.random(0, 10000000000).toString().substring(2)))] = {
        command: req.query["command.command.command"],
        method: req.query["command.command.method"],
        message: req.query["command.command.message"],
        user_stramer: req.query["command.command.perm.streamer"],
        user_moderat: req.query["command.command.perm.moderato"],
        user_user: req.query["command.command.perm.user"]
      },
      obj
    );
    fs.appendFileSync("./data/command/command.ini", ini.stringify(newCommand));
  }
  return res.send("ok");
});

if (CheckWebInstalled()) {
  CONFIG = ini.parse(fs.readFileSync("./data/config.ini", 'utf-8'));
  Client = new tmi.client({
    options: {
      debug: false
    },
    connection: {
      reconnect: true
    },
    identity: {
      username: CONFIG.USER.username,
      password: CONFIG.USER.password
    }
  });
  Client.api({
    url: "https://api.twitch.tv/kraken/",
    headers: {
      "Client-ID": "y5ga4viagr5qrsdjkr4pxp6scvbx3a",
      "Accept": "application/vnd.twitchtv.v3+json"
    }
  }, function(err, res, body) {
    return LOG(true, "Client-ID: y5ga4viagr5qrsdjkr4pxp6scvbx3a");
  });
  Client.connect().then(function(data) {
    LOG(true, "===========================");
    return LOG(true, "CONNECTED");
  })["catch"](function(err) {
    LOG(true, "===========================");
    LOG(true, "ERROR: Can't connect to IRC");
    LOG(true, "===========================");
    LOG(true, "CHECK YOUR PASSWORD OR MAKE");
    LOG(true, "AN ISSUE ON GITHUB REPO    ");
    return LOG(true, "===========================");
  });
  Client.on("connected", function(adress, port) {
    LOG(true, "Adress: " + adress);
    LOG(true, "Port: " + port);
    Client.color("Green");
    return Client.join(CONFIG.USER.chanel).then(function(data) {
      LOG(true, "JOIN CHANEL #" + CONFIG.USER.chanel);
      Client.on("chat", function(channel, user, message, self) {
        var COMMAND, n, results;
        LOG(false, "[" + channel + "] <" + user['display-name'] + ">: " + message);
        if (CheckBotStart()) {
          if (!self) {
            COMMAND = ini.parse(fs.readFileSync("./data/command/command.ini", 'utf-8'));
            n = 0;
            results = [];
            while (n < Object.keys(COMMAND).length) {
              if (message === ("!" + COMMAND[Object.keys(COMMAND)[n]]['command'])) {
                if (COMMAND[Object.keys(COMMAND)[n]]['user_stramer']) {
                  if (CONFIG.USER.chanel === user['username']) {
                    if (user['username'] === CONFIG.USER.chanel) {
                      LOG(true, "[" + channel + "] [" + user['display-name'] + "] [!" + COMMAND[Object.keys(COMMAND)[n]]['command'] + "]");
                      if (COMMAND[Object.keys(COMMAND)[n]]['method'] === "Chat") {
                        Client.say(CONFIG.USER.chanel, VarToText(COMMAND[Object.keys(COMMAND)[n]]['message'], {
                          data: {
                            username: user['display-name']
                          }
                        }));
                      }
                      if (COMMAND[Object.keys(COMMAND)[n]]['method'] === "Me") {
                        Client.action(CONFIG.USER.chanel, VarToText(COMMAND[Object.keys(COMMAND)[n]]['message'], {
                          data: {
                            username: user['display-name']
                          }
                        }));
                      }
                      if (COMMAND[Object.keys(COMMAND)[n]]['method'] === "Whisper") {
                        Client.whisper(user['username'], VarToText(COMMAND[Object.keys(COMMAND)[n]]['message'], {
                          data: {
                            username: user['display-name']
                          }
                        }));
                      }
                    }
                  }
                }
                if (COMMAND[Object.keys(COMMAND)[n]]['user_moderat']) {
                  if (Client.isMod(CONFIG.USER.chanel, user['username'])) {
                    if (user['username'] !== CONFIG.USER.chanel) {
                      LOG(true, "[" + channel + "] [" + user['display-name'] + "] [!" + COMMAND[Object.keys(COMMAND)[n]]['command'] + "]");
                      if (COMMAND[Object.keys(COMMAND)[n]]['method'] === "Chat") {
                        Client.say(CONFIG.USER.chanel, VarToText(COMMAND[Object.keys(COMMAND)[n]]['message'], {
                          data: {
                            username: user['display-name']
                          }
                        }));
                      }
                      if (COMMAND[Object.keys(COMMAND)[n]]['method'] === "Me") {
                        Client.action(CONFIG.USER.chanel, VarToText(COMMAND[Object.keys(COMMAND)[n]]['message'], {
                          data: {
                            username: user['display-name']
                          }
                        }));
                      }
                      if (COMMAND[Object.keys(COMMAND)[n]]['method'] === "Whisper") {
                        Client.whisper(user['username'], VarToText(COMMAND[Object.keys(COMMAND)[n]]['message'], {
                          data: {
                            username: user['display-name']
                          }
                        }));
                      }
                    }
                  }
                }
                if (COMMAND[Object.keys(COMMAND)[n]]['user_user']) {
                  if (!Client.isMod(user['username'], CONFIG.USER.chanel)) {
                    if (user['username'] !== CONFIG.USER.chanel) {
                      LOG(true, "[" + channel + "] [" + user['display-name'] + "] [!" + COMMAND[Object.keys(COMMAND)[n]]['command'] + "]");
                      if (COMMAND[Object.keys(COMMAND)[n]]['method'] === "Chat") {
                        Client.say(CONFIG.USER.chanel, VarToText(COMMAND[Object.keys(COMMAND)[n]]['message'], {
                          data: {
                            username: user['display-name']
                          }
                        }));
                      }
                      if (COMMAND[Object.keys(COMMAND)[n]]['method'] === "Me") {
                        Client.action(CONFIG.USER.chanel, VarToText(COMMAND[Object.keys(COMMAND)[n]]['message'], {
                          data: {
                            username: user['display-name']
                          }
                        }));
                      }
                      if (COMMAND[Object.keys(COMMAND)[n]]['method'] === "Whisper") {
                        Client.whisper(user['username'], VarToText(COMMAND[Object.keys(COMMAND)[n]]['message'], {
                          data: {
                            username: user['display-name']
                          }
                        }));
                      }
                    }
                  }
                }
              }
              results.push(n++);
            }
            return results;
          }
        }
      });
      Client.on("join", function(channel, username, self) {
        var EVENT, n, results;
        if (CheckBotStart()) {
          if (!self) {
            EVENT = ini.parse(fs.readFileSync("./data/command/event.ini", 'utf-8'));
            n = 0;
            results = [];
            while (n < Object.keys(EVENT).length) {
              if (EVENT[Object.keys(EVENT)[n]]['event'] === "onJoin") {
                LOG(true, "[" + channel + "] [" + username + "] [" + EVENT[Object.keys(EVENT)[n]]['event'] + "]");
                if (EVENT[Object.keys(EVENT)[n]]['method'] === "Chat") {
                  Client.say(CONFIG.USER.chanel, VarToText(EVENT[Object.keys(EVENT)[n]]['message'], {
                    data: {
                      username: username
                    }
                  }));
                }
                if (EVENT[Object.keys(EVENT)[n]]['method'] === "Me") {
                  Client.action(CONFIG.USER.chanel, VarToText(EVENT[Object.keys(EVENT)[n]]['message'], {
                    data: {
                      username: username
                    }
                  }));
                }
                if (EVENT[Object.keys(EVENT)[n]]['method'] === "Whisper") {
                  Client.whisper(username, VarToText(EVENT[Object.keys(EVENT)[n]]['message'], {
                    data: {
                      username: username
                    }
                  }));
                }
              }
              results.push(n++);
            }
            return results;
          }
        }
      });
      return Client.on("part", function(channel, username, self) {
        var EVENT, n, results;
        if (CheckBotStart()) {
          if (!self) {
            EVENT = ini.parse(fs.readFileSync("./data/command/event.ini", 'utf-8'));
            n = 0;
            results = [];
            while (n < Object.keys(EVENT).length) {
              if (EVENT[Object.keys(EVENT)[n]]['event'] === "onLeave") {
                LOG(true, "[" + channel + "] [" + username + "] [" + EVENT[Object.keys(EVENT)[n]]['event'] + "]");
                if (EVENT[Object.keys(EVENT)[n]]['method'] === "Chat") {
                  Client.say(CONFIG.USER.chanel, VarToText(EVENT[Object.keys(EVENT)[n]]['message'], {
                    data: {
                      username: username
                    }
                  }));
                }
                if (EVENT[Object.keys(EVENT)[n]]['method'] === "Me") {
                  Client.action(CONFIG.USER.chanel, VarToText(EVENT[Object.keys(EVENT)[n]]['message'], {
                    data: {
                      username: username
                    }
                  }));
                }
                if (EVENT[Object.keys(EVENT)[n]]['method'] === "Whisper") {
                  Client.whisper(username, VarToText(EVENT[Object.keys(EVENT)[n]]['message'], {
                    data: {
                      username: username
                    }
                  }));
                }
              }
              results.push(n++);
            }
            return results;
          }
        }
      });
    })["catch"](function() {
      LOG(true, "ERROR: Chanel can't connect...");
      return process.exit();
    });
  });
}
